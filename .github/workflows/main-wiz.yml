name: Build and Security Scan with Wiz

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: my-app
  REGISTRY: ghcr.io

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Save Docker image to file
      run: |
        docker save ${{ steps.meta.outputs.tags }} -o image.tar

    - name: Install Wiz CLI
      run: |
        curl -s https://wizcli.app.wiz.io/wizcli.sh | bash
        sudo mv wizcli /usr/local/bin/
        chmod +x /usr/local/bin/wizcli

    - name: Configure Wiz CLI
      run: |
        wizcli auth --id ${{ secrets.WIZ_CLIENT_ID }} --secret ${{ secrets.WIZ_CLIENT_SECRET }} --url ${{ secrets.WIZ_URL }}

    - name: Scan Docker image with Wiz
      id: wiz-scan
      run: |
        # Scan the saved Docker image
        wizcli scan docker-image \
          --image-tar image.tar \
          --format json \
          --output wiz-scan-results.json
        
        # Check if scan was successful
        if [ $? -eq 0 ]; then
          echo "Wiz scan completed successfully"
          
          # Parse results to check for critical/high vulnerabilities
          CRITICAL_COUNT=$(jq '.vulnerabilities[] | select(.severity == "CRITICAL") | .id' wiz-scan-results.json | wc -l)
          HIGH_COUNT=$(jq '.vulnerabilities[] | select(.severity == "HIGH") | .id' wiz-scan-results.json | wc -l)
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          # Set outputs for subsequent steps
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          
        else
          echo "Wiz scan failed"
          exit 1
        fi

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: wiz-scan-results
        path: wiz-scan-results.json
        retention-days: 30

    - name: Check for critical vulnerabilities
      if: steps.wiz-scan.outputs.critical_count > 0
      run: |
        echo "❌ Critical vulnerabilities found: ${{ steps.wiz-scan.outputs.critical_count }}"
        echo "Failing build due to critical security issues"
        exit 1

    - name: Push image if scan passes
      if: steps.wiz-scan.outputs.critical_count == 0 && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Success
      if: steps.wiz-scan.outputs.critical_count == 0
      run: |
        echo "✅ Security scan passed! No critical vulnerabilities found."
        echo "High vulnerabilities: ${{ steps.wiz-scan.outputs.high_count }}"
